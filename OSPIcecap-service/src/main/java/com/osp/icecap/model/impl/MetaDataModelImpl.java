/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.osp.icecap.model.impl;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.Validator;

import com.osp.icecap.model.MetaData;
import com.osp.icecap.model.MetaDataModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the MetaData service. Represents a row in the &quot;ICECAP_MetaData&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>MetaDataModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MetaDataImpl}.
 * </p>
 *
 * @author Jerry H. Seo
 * @see MetaDataImpl
 * @generated
 */
@ProviderType
public class MetaDataModelImpl
	extends BaseModelImpl<MetaData> implements MetaDataModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a meta data model instance should use the <code>MetaData</code> interface instead.
	 */
	public static final String TABLE_NAME = "ICECAP_MetaData";

	public static final Object[][] TABLE_COLUMNS = {
		{"dataUuid", Types.VARCHAR}, {"creator", Types.VARCHAR},
		{"created", Types.VARCHAR}, {"title", Types.VARCHAR},
		{"description", Types.VARCHAR}, {"summary", Types.VARCHAR},
		{"doi", Types.VARCHAR}, {"dateAccepted", Types.VARCHAR},
		{"dateCopyrighted", Types.VARCHAR}, {"dateSubmitted", Types.VARCHAR},
		{"format", Types.VARCHAR}, {"version", Types.VARCHAR},
		{"issued", Types.VARCHAR}, {"license", Types.VARCHAR},
		{"datePattern", Types.VARCHAR}, {"dataCollectionId", Types.BIGINT},
		{"dataSetId", Types.BIGINT}, {"dataSectionId", Types.BIGINT},
		{"dataPackId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("dataUuid", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("creator", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("created", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("summary", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("doi", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateAccepted", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateCopyrighted", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateSubmitted", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("format", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("version", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("issued", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("license", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("datePattern", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dataCollectionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dataSetId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dataSectionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dataPackId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ICECAP_MetaData (dataUuid VARCHAR(75) not null primary key,creator VARCHAR(75) null,created VARCHAR(75) null,title STRING null,description STRING null,summary STRING null,doi VARCHAR(75) null,dateAccepted VARCHAR(75) null,dateCopyrighted VARCHAR(75) null,dateSubmitted VARCHAR(75) null,format VARCHAR(75) null,version VARCHAR(75) null,issued VARCHAR(75) null,license VARCHAR(75) null,datePattern VARCHAR(75) null,dataCollectionId LONG,dataSetId LONG,dataSectionId LONG,dataPackId LONG)";

	public static final String TABLE_SQL_DROP = "drop table ICECAP_MetaData";

	public static final String ORDER_BY_JPQL =
		" ORDER BY metaData.dataUuid ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ICECAP_MetaData.dataUuid ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long CREATOR_COLUMN_BITMASK = 1L;

	public static final long DATACOLLECTIONID_COLUMN_BITMASK = 2L;

	public static final long DATAPACKID_COLUMN_BITMASK = 4L;

	public static final long DATASECTIONID_COLUMN_BITMASK = 8L;

	public static final long DATASETID_COLUMN_BITMASK = 16L;

	public static final long DATAUUID_COLUMN_BITMASK = 32L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public MetaDataModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _dataUuid;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setDataUuid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dataUuid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return MetaData.class;
	}

	@Override
	public String getModelClassName() {
		return MetaData.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<MetaData, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<MetaData, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MetaData, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((MetaData)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<MetaData, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<MetaData, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(MetaData)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<MetaData, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<MetaData, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, MetaData>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			MetaData.class.getClassLoader(), MetaData.class,
			ModelWrapper.class);

		try {
			Constructor<MetaData> constructor =
				(Constructor<MetaData>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<MetaData, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<MetaData, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<MetaData, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<MetaData, Object>>();
		Map<String, BiConsumer<MetaData, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<MetaData, ?>>();

		attributeGetterFunctions.put("dataUuid", MetaData::getDataUuid);
		attributeSetterBiConsumers.put(
			"dataUuid", (BiConsumer<MetaData, String>)MetaData::setDataUuid);
		attributeGetterFunctions.put("creator", MetaData::getCreator);
		attributeSetterBiConsumers.put(
			"creator", (BiConsumer<MetaData, String>)MetaData::setCreator);
		attributeGetterFunctions.put("created", MetaData::getCreated);
		attributeSetterBiConsumers.put(
			"created", (BiConsumer<MetaData, String>)MetaData::setCreated);
		attributeGetterFunctions.put("title", MetaData::getTitle);
		attributeSetterBiConsumers.put(
			"title", (BiConsumer<MetaData, String>)MetaData::setTitle);
		attributeGetterFunctions.put("description", MetaData::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<MetaData, String>)MetaData::setDescription);
		attributeGetterFunctions.put("summary", MetaData::getSummary);
		attributeSetterBiConsumers.put(
			"summary", (BiConsumer<MetaData, String>)MetaData::setSummary);
		attributeGetterFunctions.put("doi", MetaData::getDoi);
		attributeSetterBiConsumers.put(
			"doi", (BiConsumer<MetaData, String>)MetaData::setDoi);
		attributeGetterFunctions.put("dateAccepted", MetaData::getDateAccepted);
		attributeSetterBiConsumers.put(
			"dateAccepted",
			(BiConsumer<MetaData, String>)MetaData::setDateAccepted);
		attributeGetterFunctions.put(
			"dateCopyrighted", MetaData::getDateCopyrighted);
		attributeSetterBiConsumers.put(
			"dateCopyrighted",
			(BiConsumer<MetaData, String>)MetaData::setDateCopyrighted);
		attributeGetterFunctions.put(
			"dateSubmitted", MetaData::getDateSubmitted);
		attributeSetterBiConsumers.put(
			"dateSubmitted",
			(BiConsumer<MetaData, String>)MetaData::setDateSubmitted);
		attributeGetterFunctions.put("format", MetaData::getFormat);
		attributeSetterBiConsumers.put(
			"format", (BiConsumer<MetaData, String>)MetaData::setFormat);
		attributeGetterFunctions.put("version", MetaData::getVersion);
		attributeSetterBiConsumers.put(
			"version", (BiConsumer<MetaData, String>)MetaData::setVersion);
		attributeGetterFunctions.put("issued", MetaData::getIssued);
		attributeSetterBiConsumers.put(
			"issued", (BiConsumer<MetaData, String>)MetaData::setIssued);
		attributeGetterFunctions.put("license", MetaData::getLicense);
		attributeSetterBiConsumers.put(
			"license", (BiConsumer<MetaData, String>)MetaData::setLicense);
		attributeGetterFunctions.put("datePattern", MetaData::getDatePattern);
		attributeSetterBiConsumers.put(
			"datePattern",
			(BiConsumer<MetaData, String>)MetaData::setDatePattern);
		attributeGetterFunctions.put(
			"dataCollectionId", MetaData::getDataCollectionId);
		attributeSetterBiConsumers.put(
			"dataCollectionId",
			(BiConsumer<MetaData, Long>)MetaData::setDataCollectionId);
		attributeGetterFunctions.put("dataSetId", MetaData::getDataSetId);
		attributeSetterBiConsumers.put(
			"dataSetId", (BiConsumer<MetaData, Long>)MetaData::setDataSetId);
		attributeGetterFunctions.put(
			"dataSectionId", MetaData::getDataSectionId);
		attributeSetterBiConsumers.put(
			"dataSectionId",
			(BiConsumer<MetaData, Long>)MetaData::setDataSectionId);
		attributeGetterFunctions.put("dataPackId", MetaData::getDataPackId);
		attributeSetterBiConsumers.put(
			"dataPackId", (BiConsumer<MetaData, Long>)MetaData::setDataPackId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getDataUuid() {
		if (_dataUuid == null) {
			return "";
		}
		else {
			return _dataUuid;
		}
	}

	@Override
	public void setDataUuid(String dataUuid) {
		_dataUuid = dataUuid;
	}

	@Override
	public String getCreator() {
		if (_creator == null) {
			return "";
		}
		else {
			return _creator;
		}
	}

	@Override
	public void setCreator(String creator) {
		_columnBitmask |= CREATOR_COLUMN_BITMASK;

		if (_originalCreator == null) {
			_originalCreator = _creator;
		}

		_creator = creator;
	}

	public String getOriginalCreator() {
		return GetterUtil.getString(_originalCreator);
	}

	@Override
	public String getCreated() {
		if (_created == null) {
			return "";
		}
		else {
			return _created;
		}
	}

	@Override
	public void setCreated(String created) {
		_created = created;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public String getTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId);
	}

	@Override
	public String getTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId, useDefault);
	}

	@Override
	public String getTitle(String languageId) {
		return LocalizationUtil.getLocalization(getTitle(), languageId);
	}

	@Override
	public String getTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getTitle(), languageId, useDefault);
	}

	@Override
	public String getTitleCurrentLanguageId() {
		return _titleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTitleCurrentValue() {
		Locale locale = getLocale(_titleCurrentLanguageId);

		return getTitle(locale);
	}

	@Override
	public Map<Locale, String> getTitleMap() {
		return LocalizationUtil.getLocalizationMap(getTitle());
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public void setTitle(String title, Locale locale) {
		setTitle(title, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setTitle(String title, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(title)) {
			setTitle(
				LocalizationUtil.updateLocalization(
					getTitle(), "Title", title, languageId, defaultLanguageId));
		}
		else {
			setTitle(
				LocalizationUtil.removeLocalization(
					getTitle(), "Title", languageId));
		}
	}

	@Override
	public void setTitleCurrentLanguageId(String languageId) {
		_titleCurrentLanguageId = languageId;
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap) {
		setTitleMap(titleMap, LocaleUtil.getDefault());
	}

	@Override
	public void setTitleMap(
		Map<Locale, String> titleMap, Locale defaultLocale) {

		if (titleMap == null) {
			return;
		}

		setTitle(
			LocalizationUtil.updateLocalization(
				titleMap, getTitle(), "Title",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public String getDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId);
	}

	@Override
	public String getDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId, useDefault);
	}

	@Override
	public String getDescription(String languageId) {
		return LocalizationUtil.getLocalization(getDescription(), languageId);
	}

	@Override
	public String getDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getDescription(), languageId, useDefault);
	}

	@Override
	public String getDescriptionCurrentLanguageId() {
		return _descriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDescriptionCurrentValue() {
		Locale locale = getLocale(_descriptionCurrentLanguageId);

		return getDescription(locale);
	}

	@Override
	public Map<Locale, String> getDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getDescription());
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public void setDescription(String description, Locale locale) {
		setDescription(description, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setDescription(
		String description, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(description)) {
			setDescription(
				LocalizationUtil.updateLocalization(
					getDescription(), "Description", description, languageId,
					defaultLanguageId));
		}
		else {
			setDescription(
				LocalizationUtil.removeLocalization(
					getDescription(), "Description", languageId));
		}
	}

	@Override
	public void setDescriptionCurrentLanguageId(String languageId) {
		_descriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap) {
		setDescriptionMap(descriptionMap, LocaleUtil.getDefault());
	}

	@Override
	public void setDescriptionMap(
		Map<Locale, String> descriptionMap, Locale defaultLocale) {

		if (descriptionMap == null) {
			return;
		}

		setDescription(
			LocalizationUtil.updateLocalization(
				descriptionMap, getDescription(), "Description",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public String getSummary() {
		if (_summary == null) {
			return "";
		}
		else {
			return _summary;
		}
	}

	@Override
	public String getSummary(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSummary(languageId);
	}

	@Override
	public String getSummary(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSummary(languageId, useDefault);
	}

	@Override
	public String getSummary(String languageId) {
		return LocalizationUtil.getLocalization(getSummary(), languageId);
	}

	@Override
	public String getSummary(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getSummary(), languageId, useDefault);
	}

	@Override
	public String getSummaryCurrentLanguageId() {
		return _summaryCurrentLanguageId;
	}

	@JSON
	@Override
	public String getSummaryCurrentValue() {
		Locale locale = getLocale(_summaryCurrentLanguageId);

		return getSummary(locale);
	}

	@Override
	public Map<Locale, String> getSummaryMap() {
		return LocalizationUtil.getLocalizationMap(getSummary());
	}

	@Override
	public void setSummary(String summary) {
		_summary = summary;
	}

	@Override
	public void setSummary(String summary, Locale locale) {
		setSummary(summary, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setSummary(
		String summary, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(summary)) {
			setSummary(
				LocalizationUtil.updateLocalization(
					getSummary(), "Summary", summary, languageId,
					defaultLanguageId));
		}
		else {
			setSummary(
				LocalizationUtil.removeLocalization(
					getSummary(), "Summary", languageId));
		}
	}

	@Override
	public void setSummaryCurrentLanguageId(String languageId) {
		_summaryCurrentLanguageId = languageId;
	}

	@Override
	public void setSummaryMap(Map<Locale, String> summaryMap) {
		setSummaryMap(summaryMap, LocaleUtil.getDefault());
	}

	@Override
	public void setSummaryMap(
		Map<Locale, String> summaryMap, Locale defaultLocale) {

		if (summaryMap == null) {
			return;
		}

		setSummary(
			LocalizationUtil.updateLocalization(
				summaryMap, getSummary(), "Summary",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public String getDoi() {
		if (_doi == null) {
			return "";
		}
		else {
			return _doi;
		}
	}

	@Override
	public void setDoi(String doi) {
		_doi = doi;
	}

	@Override
	public String getDateAccepted() {
		if (_dateAccepted == null) {
			return "";
		}
		else {
			return _dateAccepted;
		}
	}

	@Override
	public void setDateAccepted(String dateAccepted) {
		_dateAccepted = dateAccepted;
	}

	@Override
	public String getDateCopyrighted() {
		if (_dateCopyrighted == null) {
			return "";
		}
		else {
			return _dateCopyrighted;
		}
	}

	@Override
	public void setDateCopyrighted(String dateCopyrighted) {
		_dateCopyrighted = dateCopyrighted;
	}

	@Override
	public String getDateSubmitted() {
		if (_dateSubmitted == null) {
			return "";
		}
		else {
			return _dateSubmitted;
		}
	}

	@Override
	public void setDateSubmitted(String dateSubmitted) {
		_dateSubmitted = dateSubmitted;
	}

	@Override
	public String getFormat() {
		if (_format == null) {
			return "";
		}
		else {
			return _format;
		}
	}

	@Override
	public void setFormat(String format) {
		_format = format;
	}

	@Override
	public String getVersion() {
		if (_version == null) {
			return "";
		}
		else {
			return _version;
		}
	}

	@Override
	public void setVersion(String version) {
		_version = version;
	}

	@Override
	public String getIssued() {
		if (_issued == null) {
			return "";
		}
		else {
			return _issued;
		}
	}

	@Override
	public void setIssued(String issued) {
		_issued = issued;
	}

	@Override
	public String getLicense() {
		if (_license == null) {
			return "";
		}
		else {
			return _license;
		}
	}

	@Override
	public void setLicense(String license) {
		_license = license;
	}

	@Override
	public String getDatePattern() {
		if (_datePattern == null) {
			return "";
		}
		else {
			return _datePattern;
		}
	}

	@Override
	public void setDatePattern(String datePattern) {
		_datePattern = datePattern;
	}

	@Override
	public long getDataCollectionId() {
		return _dataCollectionId;
	}

	@Override
	public void setDataCollectionId(long dataCollectionId) {
		_columnBitmask |= DATACOLLECTIONID_COLUMN_BITMASK;

		if (!_setOriginalDataCollectionId) {
			_setOriginalDataCollectionId = true;

			_originalDataCollectionId = _dataCollectionId;
		}

		_dataCollectionId = dataCollectionId;
	}

	public long getOriginalDataCollectionId() {
		return _originalDataCollectionId;
	}

	@Override
	public long getDataSetId() {
		return _dataSetId;
	}

	@Override
	public void setDataSetId(long dataSetId) {
		_columnBitmask |= DATASETID_COLUMN_BITMASK;

		if (!_setOriginalDataSetId) {
			_setOriginalDataSetId = true;

			_originalDataSetId = _dataSetId;
		}

		_dataSetId = dataSetId;
	}

	public long getOriginalDataSetId() {
		return _originalDataSetId;
	}

	@Override
	public long getDataSectionId() {
		return _dataSectionId;
	}

	@Override
	public void setDataSectionId(long dataSectionId) {
		_columnBitmask |= DATASECTIONID_COLUMN_BITMASK;

		if (!_setOriginalDataSectionId) {
			_setOriginalDataSectionId = true;

			_originalDataSectionId = _dataSectionId;
		}

		_dataSectionId = dataSectionId;
	}

	public long getOriginalDataSectionId() {
		return _originalDataSectionId;
	}

	@Override
	public long getDataPackId() {
		return _dataPackId;
	}

	@Override
	public void setDataPackId(long dataPackId) {
		_columnBitmask |= DATAPACKID_COLUMN_BITMASK;

		if (!_setOriginalDataPackId) {
			_setOriginalDataPackId = true;

			_originalDataPackId = _dataPackId;
		}

		_dataPackId = dataPackId;
	}

	public long getOriginalDataPackId() {
		return _originalDataPackId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> titleMap = getTitleMap();

		for (Map.Entry<Locale, String> entry : titleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> descriptionMap = getDescriptionMap();

		for (Map.Entry<Locale, String> entry : descriptionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> summaryMap = getSummaryMap();

		for (Map.Entry<Locale, String> entry : summaryMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getTitle();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			MetaData.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String title = getTitle(defaultLocale);

		if (Validator.isNull(title)) {
			setTitle(getTitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTitle(getTitle(defaultLocale), defaultLocale, defaultLocale);
		}

		String description = getDescription(defaultLocale);

		if (Validator.isNull(description)) {
			setDescription(
				getDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDescription(
				getDescription(defaultLocale), defaultLocale, defaultLocale);
		}

		String summary = getSummary(defaultLocale);

		if (Validator.isNull(summary)) {
			setSummary(getSummary(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setSummary(getSummary(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public MetaData toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MetaDataImpl metaDataImpl = new MetaDataImpl();

		metaDataImpl.setDataUuid(getDataUuid());
		metaDataImpl.setCreator(getCreator());
		metaDataImpl.setCreated(getCreated());
		metaDataImpl.setTitle(getTitle());
		metaDataImpl.setDescription(getDescription());
		metaDataImpl.setSummary(getSummary());
		metaDataImpl.setDoi(getDoi());
		metaDataImpl.setDateAccepted(getDateAccepted());
		metaDataImpl.setDateCopyrighted(getDateCopyrighted());
		metaDataImpl.setDateSubmitted(getDateSubmitted());
		metaDataImpl.setFormat(getFormat());
		metaDataImpl.setVersion(getVersion());
		metaDataImpl.setIssued(getIssued());
		metaDataImpl.setLicense(getLicense());
		metaDataImpl.setDatePattern(getDatePattern());
		metaDataImpl.setDataCollectionId(getDataCollectionId());
		metaDataImpl.setDataSetId(getDataSetId());
		metaDataImpl.setDataSectionId(getDataSectionId());
		metaDataImpl.setDataPackId(getDataPackId());

		metaDataImpl.resetOriginalValues();

		return metaDataImpl;
	}

	@Override
	public int compareTo(MetaData metaData) {
		String primaryKey = metaData.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MetaData)) {
			return false;
		}

		MetaData metaData = (MetaData)obj;

		String primaryKey = metaData.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		MetaDataModelImpl metaDataModelImpl = this;

		metaDataModelImpl._originalCreator = metaDataModelImpl._creator;

		metaDataModelImpl._originalDataCollectionId =
			metaDataModelImpl._dataCollectionId;

		metaDataModelImpl._setOriginalDataCollectionId = false;

		metaDataModelImpl._originalDataSetId = metaDataModelImpl._dataSetId;

		metaDataModelImpl._setOriginalDataSetId = false;

		metaDataModelImpl._originalDataSectionId =
			metaDataModelImpl._dataSectionId;

		metaDataModelImpl._setOriginalDataSectionId = false;

		metaDataModelImpl._originalDataPackId = metaDataModelImpl._dataPackId;

		metaDataModelImpl._setOriginalDataPackId = false;

		metaDataModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MetaData> toCacheModel() {
		MetaDataCacheModel metaDataCacheModel = new MetaDataCacheModel();

		metaDataCacheModel.dataUuid = getDataUuid();

		String dataUuid = metaDataCacheModel.dataUuid;

		if ((dataUuid != null) && (dataUuid.length() == 0)) {
			metaDataCacheModel.dataUuid = null;
		}

		metaDataCacheModel.creator = getCreator();

		String creator = metaDataCacheModel.creator;

		if ((creator != null) && (creator.length() == 0)) {
			metaDataCacheModel.creator = null;
		}

		metaDataCacheModel.created = getCreated();

		String created = metaDataCacheModel.created;

		if ((created != null) && (created.length() == 0)) {
			metaDataCacheModel.created = null;
		}

		metaDataCacheModel.title = getTitle();

		String title = metaDataCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			metaDataCacheModel.title = null;
		}

		metaDataCacheModel.description = getDescription();

		String description = metaDataCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			metaDataCacheModel.description = null;
		}

		metaDataCacheModel.summary = getSummary();

		String summary = metaDataCacheModel.summary;

		if ((summary != null) && (summary.length() == 0)) {
			metaDataCacheModel.summary = null;
		}

		metaDataCacheModel.doi = getDoi();

		String doi = metaDataCacheModel.doi;

		if ((doi != null) && (doi.length() == 0)) {
			metaDataCacheModel.doi = null;
		}

		metaDataCacheModel.dateAccepted = getDateAccepted();

		String dateAccepted = metaDataCacheModel.dateAccepted;

		if ((dateAccepted != null) && (dateAccepted.length() == 0)) {
			metaDataCacheModel.dateAccepted = null;
		}

		metaDataCacheModel.dateCopyrighted = getDateCopyrighted();

		String dateCopyrighted = metaDataCacheModel.dateCopyrighted;

		if ((dateCopyrighted != null) && (dateCopyrighted.length() == 0)) {
			metaDataCacheModel.dateCopyrighted = null;
		}

		metaDataCacheModel.dateSubmitted = getDateSubmitted();

		String dateSubmitted = metaDataCacheModel.dateSubmitted;

		if ((dateSubmitted != null) && (dateSubmitted.length() == 0)) {
			metaDataCacheModel.dateSubmitted = null;
		}

		metaDataCacheModel.format = getFormat();

		String format = metaDataCacheModel.format;

		if ((format != null) && (format.length() == 0)) {
			metaDataCacheModel.format = null;
		}

		metaDataCacheModel.version = getVersion();

		String version = metaDataCacheModel.version;

		if ((version != null) && (version.length() == 0)) {
			metaDataCacheModel.version = null;
		}

		metaDataCacheModel.issued = getIssued();

		String issued = metaDataCacheModel.issued;

		if ((issued != null) && (issued.length() == 0)) {
			metaDataCacheModel.issued = null;
		}

		metaDataCacheModel.license = getLicense();

		String license = metaDataCacheModel.license;

		if ((license != null) && (license.length() == 0)) {
			metaDataCacheModel.license = null;
		}

		metaDataCacheModel.datePattern = getDatePattern();

		String datePattern = metaDataCacheModel.datePattern;

		if ((datePattern != null) && (datePattern.length() == 0)) {
			metaDataCacheModel.datePattern = null;
		}

		metaDataCacheModel.dataCollectionId = getDataCollectionId();

		metaDataCacheModel.dataSetId = getDataSetId();

		metaDataCacheModel.dataSectionId = getDataSectionId();

		metaDataCacheModel.dataPackId = getDataPackId();

		return metaDataCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<MetaData, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<MetaData, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MetaData, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((MetaData)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<MetaData, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<MetaData, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MetaData, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((MetaData)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, MetaData>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _dataUuid;
	private String _creator;
	private String _originalCreator;
	private String _created;
	private String _title;
	private String _titleCurrentLanguageId;
	private String _description;
	private String _descriptionCurrentLanguageId;
	private String _summary;
	private String _summaryCurrentLanguageId;
	private String _doi;
	private String _dateAccepted;
	private String _dateCopyrighted;
	private String _dateSubmitted;
	private String _format;
	private String _version;
	private String _issued;
	private String _license;
	private String _datePattern;
	private long _dataCollectionId;
	private long _originalDataCollectionId;
	private boolean _setOriginalDataCollectionId;
	private long _dataSetId;
	private long _originalDataSetId;
	private boolean _setOriginalDataSetId;
	private long _dataSectionId;
	private long _originalDataSectionId;
	private boolean _setOriginalDataSectionId;
	private long _dataPackId;
	private long _originalDataPackId;
	private boolean _setOriginalDataPackId;
	private long _columnBitmask;
	private MetaData _escapedModel;

}