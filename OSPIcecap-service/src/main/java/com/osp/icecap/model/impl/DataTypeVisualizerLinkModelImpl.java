/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.osp.icecap.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.osp.icecap.model.DataTypeVisualizerLink;
import com.osp.icecap.model.DataTypeVisualizerLinkModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the DataTypeVisualizerLink service. Represents a row in the &quot;ICECAP_DataTypeVisualizerLink&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>DataTypeVisualizerLinkModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DataTypeVisualizerLinkImpl}.
 * </p>
 *
 * @author Jerry H. Seo
 * @see DataTypeVisualizerLinkImpl
 * @generated
 */
@ProviderType
public class DataTypeVisualizerLinkModelImpl
	extends BaseModelImpl<DataTypeVisualizerLink>
	implements DataTypeVisualizerLinkModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a data type visualizer link model instance should use the <code>DataTypeVisualizerLink</code> interface instead.
	 */
	public static final String TABLE_NAME = "ICECAP_DataTypeVisualizerLink";

	public static final Object[][] TABLE_COLUMNS = {
		{"dataTypeVisualizerLinkId", Types.BIGINT},
		{"dataTypeId", Types.BIGINT}, {"visualizerName", Types.VARCHAR},
		{"visualizerVersion", Types.VARCHAR},
		{"defaultVisualizer", Types.BOOLEAN}, {"editable", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("dataTypeVisualizerLinkId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dataTypeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("visualizerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("visualizerVersion", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("defaultVisualizer", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("editable", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ICECAP_DataTypeVisualizerLink (dataTypeVisualizerLinkId LONG not null primary key,dataTypeId LONG,visualizerName VARCHAR(75) null,visualizerVersion VARCHAR(75) null,defaultVisualizer BOOLEAN,editable BOOLEAN)";

	public static final String TABLE_SQL_DROP =
		"drop table ICECAP_DataTypeVisualizerLink";

	public static final String ORDER_BY_JPQL =
		" ORDER BY dataTypeVisualizerLink.dataTypeVisualizerLinkId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ICECAP_DataTypeVisualizerLink.dataTypeVisualizerLinkId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long DATATYPEID_COLUMN_BITMASK = 1L;

	public static final long EDITABLE_COLUMN_BITMASK = 2L;

	public static final long VISUALIZERNAME_COLUMN_BITMASK = 4L;

	public static final long VISUALIZERVERSION_COLUMN_BITMASK = 8L;

	public static final long DATATYPEVISUALIZERLINKID_COLUMN_BITMASK = 16L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public DataTypeVisualizerLinkModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dataTypeVisualizerLinkId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDataTypeVisualizerLinkId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dataTypeVisualizerLinkId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DataTypeVisualizerLink.class;
	}

	@Override
	public String getModelClassName() {
		return DataTypeVisualizerLink.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DataTypeVisualizerLink, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DataTypeVisualizerLink, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DataTypeVisualizerLink, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DataTypeVisualizerLink)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DataTypeVisualizerLink, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DataTypeVisualizerLink, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DataTypeVisualizerLink)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DataTypeVisualizerLink, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DataTypeVisualizerLink, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, DataTypeVisualizerLink>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			DataTypeVisualizerLink.class.getClassLoader(),
			DataTypeVisualizerLink.class, ModelWrapper.class);

		try {
			Constructor<DataTypeVisualizerLink> constructor =
				(Constructor<DataTypeVisualizerLink>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<DataTypeVisualizerLink, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<DataTypeVisualizerLink, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<DataTypeVisualizerLink, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<DataTypeVisualizerLink, Object>>();
		Map<String, BiConsumer<DataTypeVisualizerLink, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<DataTypeVisualizerLink, ?>>();

		attributeGetterFunctions.put(
			"dataTypeVisualizerLinkId",
			DataTypeVisualizerLink::getDataTypeVisualizerLinkId);
		attributeSetterBiConsumers.put(
			"dataTypeVisualizerLinkId",
			(BiConsumer<DataTypeVisualizerLink, Long>)
				DataTypeVisualizerLink::setDataTypeVisualizerLinkId);
		attributeGetterFunctions.put(
			"dataTypeId", DataTypeVisualizerLink::getDataTypeId);
		attributeSetterBiConsumers.put(
			"dataTypeId",
			(BiConsumer<DataTypeVisualizerLink, Long>)
				DataTypeVisualizerLink::setDataTypeId);
		attributeGetterFunctions.put(
			"visualizerName", DataTypeVisualizerLink::getVisualizerName);
		attributeSetterBiConsumers.put(
			"visualizerName",
			(BiConsumer<DataTypeVisualizerLink, String>)
				DataTypeVisualizerLink::setVisualizerName);
		attributeGetterFunctions.put(
			"visualizerVersion", DataTypeVisualizerLink::getVisualizerVersion);
		attributeSetterBiConsumers.put(
			"visualizerVersion",
			(BiConsumer<DataTypeVisualizerLink, String>)
				DataTypeVisualizerLink::setVisualizerVersion);
		attributeGetterFunctions.put(
			"defaultVisualizer", DataTypeVisualizerLink::getDefaultVisualizer);
		attributeSetterBiConsumers.put(
			"defaultVisualizer",
			(BiConsumer<DataTypeVisualizerLink, Boolean>)
				DataTypeVisualizerLink::setDefaultVisualizer);
		attributeGetterFunctions.put(
			"editable", DataTypeVisualizerLink::getEditable);
		attributeSetterBiConsumers.put(
			"editable",
			(BiConsumer<DataTypeVisualizerLink, Boolean>)
				DataTypeVisualizerLink::setEditable);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getDataTypeVisualizerLinkId() {
		return _dataTypeVisualizerLinkId;
	}

	@Override
	public void setDataTypeVisualizerLinkId(long dataTypeVisualizerLinkId) {
		_dataTypeVisualizerLinkId = dataTypeVisualizerLinkId;
	}

	@Override
	public long getDataTypeId() {
		return _dataTypeId;
	}

	@Override
	public void setDataTypeId(long dataTypeId) {
		_columnBitmask |= DATATYPEID_COLUMN_BITMASK;

		if (!_setOriginalDataTypeId) {
			_setOriginalDataTypeId = true;

			_originalDataTypeId = _dataTypeId;
		}

		_dataTypeId = dataTypeId;
	}

	public long getOriginalDataTypeId() {
		return _originalDataTypeId;
	}

	@Override
	public String getVisualizerName() {
		if (_visualizerName == null) {
			return "";
		}
		else {
			return _visualizerName;
		}
	}

	@Override
	public void setVisualizerName(String visualizerName) {
		_columnBitmask |= VISUALIZERNAME_COLUMN_BITMASK;

		if (_originalVisualizerName == null) {
			_originalVisualizerName = _visualizerName;
		}

		_visualizerName = visualizerName;
	}

	public String getOriginalVisualizerName() {
		return GetterUtil.getString(_originalVisualizerName);
	}

	@Override
	public String getVisualizerVersion() {
		if (_visualizerVersion == null) {
			return "";
		}
		else {
			return _visualizerVersion;
		}
	}

	@Override
	public void setVisualizerVersion(String visualizerVersion) {
		_columnBitmask |= VISUALIZERVERSION_COLUMN_BITMASK;

		if (_originalVisualizerVersion == null) {
			_originalVisualizerVersion = _visualizerVersion;
		}

		_visualizerVersion = visualizerVersion;
	}

	public String getOriginalVisualizerVersion() {
		return GetterUtil.getString(_originalVisualizerVersion);
	}

	@Override
	public boolean getDefaultVisualizer() {
		return _defaultVisualizer;
	}

	@Override
	public boolean isDefaultVisualizer() {
		return _defaultVisualizer;
	}

	@Override
	public void setDefaultVisualizer(boolean defaultVisualizer) {
		_defaultVisualizer = defaultVisualizer;
	}

	@Override
	public boolean getEditable() {
		return _editable;
	}

	@Override
	public boolean isEditable() {
		return _editable;
	}

	@Override
	public void setEditable(boolean editable) {
		_columnBitmask |= EDITABLE_COLUMN_BITMASK;

		if (!_setOriginalEditable) {
			_setOriginalEditable = true;

			_originalEditable = _editable;
		}

		_editable = editable;
	}

	public boolean getOriginalEditable() {
		return _originalEditable;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, DataTypeVisualizerLink.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DataTypeVisualizerLink toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DataTypeVisualizerLinkImpl dataTypeVisualizerLinkImpl =
			new DataTypeVisualizerLinkImpl();

		dataTypeVisualizerLinkImpl.setDataTypeVisualizerLinkId(
			getDataTypeVisualizerLinkId());
		dataTypeVisualizerLinkImpl.setDataTypeId(getDataTypeId());
		dataTypeVisualizerLinkImpl.setVisualizerName(getVisualizerName());
		dataTypeVisualizerLinkImpl.setVisualizerVersion(getVisualizerVersion());
		dataTypeVisualizerLinkImpl.setDefaultVisualizer(isDefaultVisualizer());
		dataTypeVisualizerLinkImpl.setEditable(isEditable());

		dataTypeVisualizerLinkImpl.resetOriginalValues();

		return dataTypeVisualizerLinkImpl;
	}

	@Override
	public int compareTo(DataTypeVisualizerLink dataTypeVisualizerLink) {
		long primaryKey = dataTypeVisualizerLink.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DataTypeVisualizerLink)) {
			return false;
		}

		DataTypeVisualizerLink dataTypeVisualizerLink =
			(DataTypeVisualizerLink)obj;

		long primaryKey = dataTypeVisualizerLink.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		DataTypeVisualizerLinkModelImpl dataTypeVisualizerLinkModelImpl = this;

		dataTypeVisualizerLinkModelImpl._originalDataTypeId =
			dataTypeVisualizerLinkModelImpl._dataTypeId;

		dataTypeVisualizerLinkModelImpl._setOriginalDataTypeId = false;

		dataTypeVisualizerLinkModelImpl._originalVisualizerName =
			dataTypeVisualizerLinkModelImpl._visualizerName;

		dataTypeVisualizerLinkModelImpl._originalVisualizerVersion =
			dataTypeVisualizerLinkModelImpl._visualizerVersion;

		dataTypeVisualizerLinkModelImpl._originalEditable =
			dataTypeVisualizerLinkModelImpl._editable;

		dataTypeVisualizerLinkModelImpl._setOriginalEditable = false;

		dataTypeVisualizerLinkModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DataTypeVisualizerLink> toCacheModel() {
		DataTypeVisualizerLinkCacheModel dataTypeVisualizerLinkCacheModel =
			new DataTypeVisualizerLinkCacheModel();

		dataTypeVisualizerLinkCacheModel.dataTypeVisualizerLinkId =
			getDataTypeVisualizerLinkId();

		dataTypeVisualizerLinkCacheModel.dataTypeId = getDataTypeId();

		dataTypeVisualizerLinkCacheModel.visualizerName = getVisualizerName();

		String visualizerName = dataTypeVisualizerLinkCacheModel.visualizerName;

		if ((visualizerName != null) && (visualizerName.length() == 0)) {
			dataTypeVisualizerLinkCacheModel.visualizerName = null;
		}

		dataTypeVisualizerLinkCacheModel.visualizerVersion =
			getVisualizerVersion();

		String visualizerVersion =
			dataTypeVisualizerLinkCacheModel.visualizerVersion;

		if ((visualizerVersion != null) && (visualizerVersion.length() == 0)) {
			dataTypeVisualizerLinkCacheModel.visualizerVersion = null;
		}

		dataTypeVisualizerLinkCacheModel.defaultVisualizer =
			isDefaultVisualizer();

		dataTypeVisualizerLinkCacheModel.editable = isEditable();

		return dataTypeVisualizerLinkCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DataTypeVisualizerLink, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DataTypeVisualizerLink, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DataTypeVisualizerLink, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((DataTypeVisualizerLink)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<DataTypeVisualizerLink, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<DataTypeVisualizerLink, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DataTypeVisualizerLink, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((DataTypeVisualizerLink)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, DataTypeVisualizerLink>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _dataTypeVisualizerLinkId;
	private long _dataTypeId;
	private long _originalDataTypeId;
	private boolean _setOriginalDataTypeId;
	private String _visualizerName;
	private String _originalVisualizerName;
	private String _visualizerVersion;
	private String _originalVisualizerVersion;
	private boolean _defaultVisualizer;
	private boolean _editable;
	private boolean _originalEditable;
	private boolean _setOriginalEditable;
	private long _columnBitmask;
	private DataTypeVisualizerLink _escapedModel;

}