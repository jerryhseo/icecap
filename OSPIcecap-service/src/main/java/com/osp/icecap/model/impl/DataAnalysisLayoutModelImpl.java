/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.osp.icecap.model.impl;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.osp.icecap.model.DataAnalysisLayout;
import com.osp.icecap.model.DataAnalysisLayoutModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DataAnalysisLayout service. Represents a row in the &quot;ICECAP_DataAnalysisLayout&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DataAnalysisLayoutModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DataAnalysisLayoutImpl}.
 * </p>
 *
 * @author Jerry H. Seo
 * @see DataAnalysisLayoutImpl
 * @generated
 */
public class DataAnalysisLayoutModelImpl
	extends BaseModelImpl<DataAnalysisLayout>
	implements DataAnalysisLayoutModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a data analysis layout model instance should use the <code>DataAnalysisLayout</code> interface instead.
	 */
	public static final String TABLE_NAME = "ICECAP_DataAnalysisLayout";

	public static final Object[][] TABLE_COLUMNS = {
		{"dataUuid", Types.VARCHAR}, {"dataCollectionId", Types.BIGINT},
		{"dataSetId", Types.BIGINT}, {"dataSectionId", Types.BIGINT},
		{"dataPackId", Types.BIGINT}, {"layout", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("dataUuid", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dataCollectionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dataSetId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dataSectionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dataPackId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("layout", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ICECAP_DataAnalysisLayout (dataUuid VARCHAR(75) not null primary key,dataCollectionId LONG,dataSetId LONG,dataSectionId LONG,dataPackId LONG,layout VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table ICECAP_DataAnalysisLayout";

	public static final String ORDER_BY_JPQL =
		" ORDER BY dataAnalysisLayout.dataUuid ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ICECAP_DataAnalysisLayout.dataUuid ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long DATACOLLECTIONID_COLUMN_BITMASK = 1L;

	public static final long DATAPACKID_COLUMN_BITMASK = 2L;

	public static final long DATASECTIONID_COLUMN_BITMASK = 4L;

	public static final long DATASETID_COLUMN_BITMASK = 8L;

	public static final long DATAUUID_COLUMN_BITMASK = 16L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public DataAnalysisLayoutModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _dataUuid;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setDataUuid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dataUuid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return DataAnalysisLayout.class;
	}

	@Override
	public String getModelClassName() {
		return DataAnalysisLayout.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DataAnalysisLayout, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DataAnalysisLayout, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DataAnalysisLayout, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DataAnalysisLayout)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DataAnalysisLayout, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DataAnalysisLayout, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DataAnalysisLayout)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DataAnalysisLayout, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DataAnalysisLayout, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, DataAnalysisLayout>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			DataAnalysisLayout.class.getClassLoader(), DataAnalysisLayout.class,
			ModelWrapper.class);

		try {
			Constructor<DataAnalysisLayout> constructor =
				(Constructor<DataAnalysisLayout>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<DataAnalysisLayout, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<DataAnalysisLayout, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<DataAnalysisLayout, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<DataAnalysisLayout, Object>>();
		Map<String, BiConsumer<DataAnalysisLayout, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<DataAnalysisLayout, ?>>();

		attributeGetterFunctions.put(
			"dataUuid", DataAnalysisLayout::getDataUuid);
		attributeSetterBiConsumers.put(
			"dataUuid",
			(BiConsumer<DataAnalysisLayout, String>)
				DataAnalysisLayout::setDataUuid);
		attributeGetterFunctions.put(
			"dataCollectionId", DataAnalysisLayout::getDataCollectionId);
		attributeSetterBiConsumers.put(
			"dataCollectionId",
			(BiConsumer<DataAnalysisLayout, Long>)
				DataAnalysisLayout::setDataCollectionId);
		attributeGetterFunctions.put(
			"dataSetId", DataAnalysisLayout::getDataSetId);
		attributeSetterBiConsumers.put(
			"dataSetId",
			(BiConsumer<DataAnalysisLayout, Long>)
				DataAnalysisLayout::setDataSetId);
		attributeGetterFunctions.put(
			"dataSectionId", DataAnalysisLayout::getDataSectionId);
		attributeSetterBiConsumers.put(
			"dataSectionId",
			(BiConsumer<DataAnalysisLayout, Long>)
				DataAnalysisLayout::setDataSectionId);
		attributeGetterFunctions.put(
			"dataPackId", DataAnalysisLayout::getDataPackId);
		attributeSetterBiConsumers.put(
			"dataPackId",
			(BiConsumer<DataAnalysisLayout, Long>)
				DataAnalysisLayout::setDataPackId);
		attributeGetterFunctions.put("layout", DataAnalysisLayout::getLayout);
		attributeSetterBiConsumers.put(
			"layout",
			(BiConsumer<DataAnalysisLayout, String>)
				DataAnalysisLayout::setLayout);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getDataUuid() {
		if (_dataUuid == null) {
			return "";
		}
		else {
			return _dataUuid;
		}
	}

	@Override
	public void setDataUuid(String dataUuid) {
		_dataUuid = dataUuid;
	}

	@Override
	public long getDataCollectionId() {
		return _dataCollectionId;
	}

	@Override
	public void setDataCollectionId(long dataCollectionId) {
		_columnBitmask |= DATACOLLECTIONID_COLUMN_BITMASK;

		if (!_setOriginalDataCollectionId) {
			_setOriginalDataCollectionId = true;

			_originalDataCollectionId = _dataCollectionId;
		}

		_dataCollectionId = dataCollectionId;
	}

	public long getOriginalDataCollectionId() {
		return _originalDataCollectionId;
	}

	@Override
	public long getDataSetId() {
		return _dataSetId;
	}

	@Override
	public void setDataSetId(long dataSetId) {
		_columnBitmask |= DATASETID_COLUMN_BITMASK;

		if (!_setOriginalDataSetId) {
			_setOriginalDataSetId = true;

			_originalDataSetId = _dataSetId;
		}

		_dataSetId = dataSetId;
	}

	public long getOriginalDataSetId() {
		return _originalDataSetId;
	}

	@Override
	public long getDataSectionId() {
		return _dataSectionId;
	}

	@Override
	public void setDataSectionId(long dataSectionId) {
		_columnBitmask |= DATASECTIONID_COLUMN_BITMASK;

		if (!_setOriginalDataSectionId) {
			_setOriginalDataSectionId = true;

			_originalDataSectionId = _dataSectionId;
		}

		_dataSectionId = dataSectionId;
	}

	public long getOriginalDataSectionId() {
		return _originalDataSectionId;
	}

	@Override
	public long getDataPackId() {
		return _dataPackId;
	}

	@Override
	public void setDataPackId(long dataPackId) {
		_columnBitmask |= DATAPACKID_COLUMN_BITMASK;

		if (!_setOriginalDataPackId) {
			_setOriginalDataPackId = true;

			_originalDataPackId = _dataPackId;
		}

		_dataPackId = dataPackId;
	}

	public long getOriginalDataPackId() {
		return _originalDataPackId;
	}

	@Override
	public String getLayout() {
		if (_layout == null) {
			return "";
		}
		else {
			return _layout;
		}
	}

	@Override
	public void setLayout(String layout) {
		_layout = layout;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public DataAnalysisLayout toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DataAnalysisLayout>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DataAnalysisLayoutImpl dataAnalysisLayoutImpl =
			new DataAnalysisLayoutImpl();

		dataAnalysisLayoutImpl.setDataUuid(getDataUuid());
		dataAnalysisLayoutImpl.setDataCollectionId(getDataCollectionId());
		dataAnalysisLayoutImpl.setDataSetId(getDataSetId());
		dataAnalysisLayoutImpl.setDataSectionId(getDataSectionId());
		dataAnalysisLayoutImpl.setDataPackId(getDataPackId());
		dataAnalysisLayoutImpl.setLayout(getLayout());

		dataAnalysisLayoutImpl.resetOriginalValues();

		return dataAnalysisLayoutImpl;
	}

	@Override
	public int compareTo(DataAnalysisLayout dataAnalysisLayout) {
		String primaryKey = dataAnalysisLayout.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DataAnalysisLayout)) {
			return false;
		}

		DataAnalysisLayout dataAnalysisLayout = (DataAnalysisLayout)obj;

		String primaryKey = dataAnalysisLayout.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		DataAnalysisLayoutModelImpl dataAnalysisLayoutModelImpl = this;

		dataAnalysisLayoutModelImpl._originalDataCollectionId =
			dataAnalysisLayoutModelImpl._dataCollectionId;

		dataAnalysisLayoutModelImpl._setOriginalDataCollectionId = false;

		dataAnalysisLayoutModelImpl._originalDataSetId =
			dataAnalysisLayoutModelImpl._dataSetId;

		dataAnalysisLayoutModelImpl._setOriginalDataSetId = false;

		dataAnalysisLayoutModelImpl._originalDataSectionId =
			dataAnalysisLayoutModelImpl._dataSectionId;

		dataAnalysisLayoutModelImpl._setOriginalDataSectionId = false;

		dataAnalysisLayoutModelImpl._originalDataPackId =
			dataAnalysisLayoutModelImpl._dataPackId;

		dataAnalysisLayoutModelImpl._setOriginalDataPackId = false;

		dataAnalysisLayoutModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DataAnalysisLayout> toCacheModel() {
		DataAnalysisLayoutCacheModel dataAnalysisLayoutCacheModel =
			new DataAnalysisLayoutCacheModel();

		dataAnalysisLayoutCacheModel.dataUuid = getDataUuid();

		String dataUuid = dataAnalysisLayoutCacheModel.dataUuid;

		if ((dataUuid != null) && (dataUuid.length() == 0)) {
			dataAnalysisLayoutCacheModel.dataUuid = null;
		}

		dataAnalysisLayoutCacheModel.dataCollectionId = getDataCollectionId();

		dataAnalysisLayoutCacheModel.dataSetId = getDataSetId();

		dataAnalysisLayoutCacheModel.dataSectionId = getDataSectionId();

		dataAnalysisLayoutCacheModel.dataPackId = getDataPackId();

		dataAnalysisLayoutCacheModel.layout = getLayout();

		String layout = dataAnalysisLayoutCacheModel.layout;

		if ((layout != null) && (layout.length() == 0)) {
			dataAnalysisLayoutCacheModel.layout = null;
		}

		return dataAnalysisLayoutCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DataAnalysisLayout, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DataAnalysisLayout, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DataAnalysisLayout, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((DataAnalysisLayout)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<DataAnalysisLayout, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<DataAnalysisLayout, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DataAnalysisLayout, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((DataAnalysisLayout)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DataAnalysisLayout>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _dataUuid;
	private long _dataCollectionId;
	private long _originalDataCollectionId;
	private boolean _setOriginalDataCollectionId;
	private long _dataSetId;
	private long _originalDataSetId;
	private boolean _setOriginalDataSetId;
	private long _dataSectionId;
	private long _originalDataSectionId;
	private boolean _setOriginalDataSectionId;
	private long _dataPackId;
	private long _originalDataPackId;
	private boolean _setOriginalDataPackId;
	private String _layout;
	private long _columnBitmask;
	private DataAnalysisLayout _escapedModel;

}