/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.osp.icecap.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.osp.icecap.model.DataEntry;
import com.osp.icecap.model.DataEntryModel;
import com.osp.icecap.model.DataEntrySoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the DataEntry service. Represents a row in the &quot;ICECAP_DataEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>DataEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DataEntryImpl}.
 * </p>
 *
 * @author Jerry H. Seo
 * @see DataEntryImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class DataEntryModelImpl
	extends BaseModelImpl<DataEntry> implements DataEntryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a data entry model instance should use the <code>DataEntry</code> interface instead.
	 */
	public static final String TABLE_NAME = "ICECAP_DataEntry";

	public static final Object[][] TABLE_COLUMNS = {
		{"dataEntryId", Types.BIGINT}, {"dataCollectionName", Types.VARCHAR},
		{"companyId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"path_", Types.VARCHAR}, {"sequenceNo", Types.INTEGER},
		{"recordCount", Types.INTEGER}, {"sequenceDelimeter", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("dataEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dataCollectionName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("path_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sequenceNo", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("recordCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("sequenceDelimeter", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ICECAP_DataEntry (dataEntryId LONG not null primary key,dataCollectionName VARCHAR(75) null,companyId LONG,groupId LONG,userId LONG,createDate DATE null,path_ VARCHAR(75) null,sequenceNo INTEGER,recordCount INTEGER,sequenceDelimeter VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table ICECAP_DataEntry";

	public static final String ORDER_BY_JPQL =
		" ORDER BY dataEntry.dataEntryId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ICECAP_DataEntry.dataEntryId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DataEntry toModel(DataEntrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DataEntry model = new DataEntryImpl();

		model.setDataEntryId(soapModel.getDataEntryId());
		model.setDataCollectionName(soapModel.getDataCollectionName());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setPath(soapModel.getPath());
		model.setSequenceNo(soapModel.getSequenceNo());
		model.setRecordCount(soapModel.getRecordCount());
		model.setSequenceDelimeter(soapModel.getSequenceDelimeter());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DataEntry> toModels(DataEntrySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DataEntry> models = new ArrayList<DataEntry>(soapModels.length);

		for (DataEntrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public DataEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dataEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDataEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dataEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DataEntry.class;
	}

	@Override
	public String getModelClassName() {
		return DataEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DataEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DataEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DataEntry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((DataEntry)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DataEntry, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DataEntry, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DataEntry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DataEntry, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DataEntry, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, DataEntry>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			DataEntry.class.getClassLoader(), DataEntry.class,
			ModelWrapper.class);

		try {
			Constructor<DataEntry> constructor =
				(Constructor<DataEntry>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<DataEntry, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<DataEntry, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<DataEntry, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<DataEntry, Object>>();
		Map<String, BiConsumer<DataEntry, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<DataEntry, ?>>();

		attributeGetterFunctions.put("dataEntryId", DataEntry::getDataEntryId);
		attributeSetterBiConsumers.put(
			"dataEntryId",
			(BiConsumer<DataEntry, Long>)DataEntry::setDataEntryId);
		attributeGetterFunctions.put(
			"dataCollectionName", DataEntry::getDataCollectionName);
		attributeSetterBiConsumers.put(
			"dataCollectionName",
			(BiConsumer<DataEntry, String>)DataEntry::setDataCollectionName);
		attributeGetterFunctions.put("companyId", DataEntry::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<DataEntry, Long>)DataEntry::setCompanyId);
		attributeGetterFunctions.put("groupId", DataEntry::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<DataEntry, Long>)DataEntry::setGroupId);
		attributeGetterFunctions.put("userId", DataEntry::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<DataEntry, Long>)DataEntry::setUserId);
		attributeGetterFunctions.put("createDate", DataEntry::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<DataEntry, Date>)DataEntry::setCreateDate);
		attributeGetterFunctions.put("path", DataEntry::getPath);
		attributeSetterBiConsumers.put(
			"path", (BiConsumer<DataEntry, String>)DataEntry::setPath);
		attributeGetterFunctions.put("sequenceNo", DataEntry::getSequenceNo);
		attributeSetterBiConsumers.put(
			"sequenceNo",
			(BiConsumer<DataEntry, Integer>)DataEntry::setSequenceNo);
		attributeGetterFunctions.put("recordCount", DataEntry::getRecordCount);
		attributeSetterBiConsumers.put(
			"recordCount",
			(BiConsumer<DataEntry, Integer>)DataEntry::setRecordCount);
		attributeGetterFunctions.put(
			"sequenceDelimeter", DataEntry::getSequenceDelimeter);
		attributeSetterBiConsumers.put(
			"sequenceDelimeter",
			(BiConsumer<DataEntry, String>)DataEntry::setSequenceDelimeter);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getDataEntryId() {
		return _dataEntryId;
	}

	@Override
	public void setDataEntryId(long dataEntryId) {
		_dataEntryId = dataEntryId;
	}

	@JSON
	@Override
	public String getDataCollectionName() {
		if (_dataCollectionName == null) {
			return "";
		}
		else {
			return _dataCollectionName;
		}
	}

	@Override
	public void setDataCollectionName(String dataCollectionName) {
		_dataCollectionName = dataCollectionName;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public String getPath() {
		if (_path == null) {
			return "";
		}
		else {
			return _path;
		}
	}

	@Override
	public void setPath(String path) {
		_path = path;
	}

	@JSON
	@Override
	public int getSequenceNo() {
		return _sequenceNo;
	}

	@Override
	public void setSequenceNo(int sequenceNo) {
		_sequenceNo = sequenceNo;
	}

	@JSON
	@Override
	public int getRecordCount() {
		return _recordCount;
	}

	@Override
	public void setRecordCount(int recordCount) {
		_recordCount = recordCount;
	}

	@JSON
	@Override
	public String getSequenceDelimeter() {
		if (_sequenceDelimeter == null) {
			return "";
		}
		else {
			return _sequenceDelimeter;
		}
	}

	@Override
	public void setSequenceDelimeter(String sequenceDelimeter) {
		_sequenceDelimeter = sequenceDelimeter;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), DataEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DataEntry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DataEntryImpl dataEntryImpl = new DataEntryImpl();

		dataEntryImpl.setDataEntryId(getDataEntryId());
		dataEntryImpl.setDataCollectionName(getDataCollectionName());
		dataEntryImpl.setCompanyId(getCompanyId());
		dataEntryImpl.setGroupId(getGroupId());
		dataEntryImpl.setUserId(getUserId());
		dataEntryImpl.setCreateDate(getCreateDate());
		dataEntryImpl.setPath(getPath());
		dataEntryImpl.setSequenceNo(getSequenceNo());
		dataEntryImpl.setRecordCount(getRecordCount());
		dataEntryImpl.setSequenceDelimeter(getSequenceDelimeter());

		dataEntryImpl.resetOriginalValues();

		return dataEntryImpl;
	}

	@Override
	public int compareTo(DataEntry dataEntry) {
		long primaryKey = dataEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DataEntry)) {
			return false;
		}

		DataEntry dataEntry = (DataEntry)obj;

		long primaryKey = dataEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<DataEntry> toCacheModel() {
		DataEntryCacheModel dataEntryCacheModel = new DataEntryCacheModel();

		dataEntryCacheModel.dataEntryId = getDataEntryId();

		dataEntryCacheModel.dataCollectionName = getDataCollectionName();

		String dataCollectionName = dataEntryCacheModel.dataCollectionName;

		if ((dataCollectionName != null) &&
			(dataCollectionName.length() == 0)) {

			dataEntryCacheModel.dataCollectionName = null;
		}

		dataEntryCacheModel.companyId = getCompanyId();

		dataEntryCacheModel.groupId = getGroupId();

		dataEntryCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			dataEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			dataEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		dataEntryCacheModel.path = getPath();

		String path = dataEntryCacheModel.path;

		if ((path != null) && (path.length() == 0)) {
			dataEntryCacheModel.path = null;
		}

		dataEntryCacheModel.sequenceNo = getSequenceNo();

		dataEntryCacheModel.recordCount = getRecordCount();

		dataEntryCacheModel.sequenceDelimeter = getSequenceDelimeter();

		String sequenceDelimeter = dataEntryCacheModel.sequenceDelimeter;

		if ((sequenceDelimeter != null) && (sequenceDelimeter.length() == 0)) {
			dataEntryCacheModel.sequenceDelimeter = null;
		}

		return dataEntryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DataEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DataEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DataEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((DataEntry)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<DataEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<DataEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DataEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((DataEntry)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, DataEntry>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _dataEntryId;
	private String _dataCollectionName;
	private long _companyId;
	private long _groupId;
	private long _userId;
	private Date _createDate;
	private String _path;
	private int _sequenceNo;
	private int _recordCount;
	private String _sequenceDelimeter;
	private DataEntry _escapedModel;

}