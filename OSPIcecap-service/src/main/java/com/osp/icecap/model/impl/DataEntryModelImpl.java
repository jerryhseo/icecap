/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.osp.icecap.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import com.osp.icecap.model.DataEntry;
import com.osp.icecap.model.DataEntryModel;
import com.osp.icecap.model.DataEntrySoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DataEntry service. Represents a row in the &quot;ICECAP_DataEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DataEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DataEntryImpl}.
 * </p>
 *
 * @author Jerry H. Seo
 * @see DataEntryImpl
 * @generated
 */
@JSON(strict = true)
public class DataEntryModelImpl
	extends BaseModelImpl<DataEntry> implements DataEntryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a data entry model instance should use the <code>DataEntry</code> interface instead.
	 */
	public static final String TABLE_NAME = "ICECAP_DataEntry";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"dataEntryId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"status", Types.INTEGER}, {"statusByUserId", Types.BIGINT},
		{"statusByUserName", Types.VARCHAR}, {"statusDate", Types.TIMESTAMP},
		{"dataTypeId", Types.BIGINT}, {"dataPackId", Types.BIGINT},
		{"dataSectionId", Types.BIGINT}, {"dataSetId", Types.BIGINT},
		{"dataCollectionId", Types.BIGINT}, {"accessURL", Types.VARCHAR},
		{"sequenceId", Types.VARCHAR}, {"accessType", Types.VARCHAR},
		{"copiedFrom", Types.BIGINT}, {"hasMetaData", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dataEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dataTypeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dataPackId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dataSectionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dataSetId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dataCollectionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("accessURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sequenceId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accessType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copiedFrom", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("hasMetaData", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ICECAP_DataEntry (uuid_ VARCHAR(75) null,dataEntryId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,dataTypeId LONG,dataPackId LONG,dataSectionId LONG,dataSetId LONG,dataCollectionId LONG,accessURL VARCHAR(75) null,sequenceId VARCHAR(75) null,accessType VARCHAR(75) null,copiedFrom LONG,hasMetaData BOOLEAN)";

	public static final String TABLE_SQL_DROP = "drop table ICECAP_DataEntry";

	public static final String ORDER_BY_JPQL =
		" ORDER BY dataEntry.dataEntryId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ICECAP_DataEntry.dataEntryId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long COPIEDFROM_COLUMN_BITMASK = 2L;

	public static final long DATACOLLECTIONID_COLUMN_BITMASK = 4L;

	public static final long DATAPACKID_COLUMN_BITMASK = 8L;

	public static final long DATASECTIONID_COLUMN_BITMASK = 16L;

	public static final long DATASETID_COLUMN_BITMASK = 32L;

	public static final long DATATYPEID_COLUMN_BITMASK = 64L;

	public static final long GROUPID_COLUMN_BITMASK = 128L;

	public static final long STATUS_COLUMN_BITMASK = 256L;

	public static final long USERID_COLUMN_BITMASK = 512L;

	public static final long UUID_COLUMN_BITMASK = 1024L;

	public static final long DATAENTRYID_COLUMN_BITMASK = 2048L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DataEntry toModel(DataEntrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DataEntry model = new DataEntryImpl();

		model.setUuid(soapModel.getUuid());
		model.setDataEntryId(soapModel.getDataEntryId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setDataTypeId(soapModel.getDataTypeId());
		model.setDataPackId(soapModel.getDataPackId());
		model.setDataSectionId(soapModel.getDataSectionId());
		model.setDataSetId(soapModel.getDataSetId());
		model.setDataCollectionId(soapModel.getDataCollectionId());
		model.setAccessURL(soapModel.getAccessURL());
		model.setSequenceId(soapModel.getSequenceId());
		model.setAccessType(soapModel.getAccessType());
		model.setCopiedFrom(soapModel.getCopiedFrom());
		model.setHasMetaData(soapModel.isHasMetaData());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DataEntry> toModels(DataEntrySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DataEntry> models = new ArrayList<DataEntry>(soapModels.length);

		for (DataEntrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public DataEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dataEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDataEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dataEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DataEntry.class;
	}

	@Override
	public String getModelClassName() {
		return DataEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DataEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DataEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DataEntry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((DataEntry)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DataEntry, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DataEntry, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DataEntry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DataEntry, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DataEntry, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, DataEntry>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			DataEntry.class.getClassLoader(), DataEntry.class,
			ModelWrapper.class);

		try {
			Constructor<DataEntry> constructor =
				(Constructor<DataEntry>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<DataEntry, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<DataEntry, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<DataEntry, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<DataEntry, Object>>();
		Map<String, BiConsumer<DataEntry, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<DataEntry, ?>>();

		attributeGetterFunctions.put("uuid", DataEntry::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<DataEntry, String>)DataEntry::setUuid);
		attributeGetterFunctions.put("dataEntryId", DataEntry::getDataEntryId);
		attributeSetterBiConsumers.put(
			"dataEntryId",
			(BiConsumer<DataEntry, Long>)DataEntry::setDataEntryId);
		attributeGetterFunctions.put("companyId", DataEntry::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<DataEntry, Long>)DataEntry::setCompanyId);
		attributeGetterFunctions.put("groupId", DataEntry::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<DataEntry, Long>)DataEntry::setGroupId);
		attributeGetterFunctions.put("userId", DataEntry::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<DataEntry, Long>)DataEntry::setUserId);
		attributeGetterFunctions.put("userName", DataEntry::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<DataEntry, String>)DataEntry::setUserName);
		attributeGetterFunctions.put("createDate", DataEntry::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<DataEntry, Date>)DataEntry::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", DataEntry::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<DataEntry, Date>)DataEntry::setModifiedDate);
		attributeGetterFunctions.put("status", DataEntry::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<DataEntry, Integer>)DataEntry::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", DataEntry::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<DataEntry, Long>)DataEntry::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", DataEntry::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<DataEntry, String>)DataEntry::setStatusByUserName);
		attributeGetterFunctions.put("statusDate", DataEntry::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate",
			(BiConsumer<DataEntry, Date>)DataEntry::setStatusDate);
		attributeGetterFunctions.put("dataTypeId", DataEntry::getDataTypeId);
		attributeSetterBiConsumers.put(
			"dataTypeId",
			(BiConsumer<DataEntry, Long>)DataEntry::setDataTypeId);
		attributeGetterFunctions.put("dataPackId", DataEntry::getDataPackId);
		attributeSetterBiConsumers.put(
			"dataPackId",
			(BiConsumer<DataEntry, Long>)DataEntry::setDataPackId);
		attributeGetterFunctions.put(
			"dataSectionId", DataEntry::getDataSectionId);
		attributeSetterBiConsumers.put(
			"dataSectionId",
			(BiConsumer<DataEntry, Long>)DataEntry::setDataSectionId);
		attributeGetterFunctions.put("dataSetId", DataEntry::getDataSetId);
		attributeSetterBiConsumers.put(
			"dataSetId", (BiConsumer<DataEntry, Long>)DataEntry::setDataSetId);
		attributeGetterFunctions.put(
			"dataCollectionId", DataEntry::getDataCollectionId);
		attributeSetterBiConsumers.put(
			"dataCollectionId",
			(BiConsumer<DataEntry, Long>)DataEntry::setDataCollectionId);
		attributeGetterFunctions.put("accessURL", DataEntry::getAccessURL);
		attributeSetterBiConsumers.put(
			"accessURL",
			(BiConsumer<DataEntry, String>)DataEntry::setAccessURL);
		attributeGetterFunctions.put("sequenceId", DataEntry::getSequenceId);
		attributeSetterBiConsumers.put(
			"sequenceId",
			(BiConsumer<DataEntry, String>)DataEntry::setSequenceId);
		attributeGetterFunctions.put("accessType", DataEntry::getAccessType);
		attributeSetterBiConsumers.put(
			"accessType",
			(BiConsumer<DataEntry, String>)DataEntry::setAccessType);
		attributeGetterFunctions.put("copiedFrom", DataEntry::getCopiedFrom);
		attributeSetterBiConsumers.put(
			"copiedFrom",
			(BiConsumer<DataEntry, Long>)DataEntry::setCopiedFrom);
		attributeGetterFunctions.put("hasMetaData", DataEntry::getHasMetaData);
		attributeSetterBiConsumers.put(
			"hasMetaData",
			(BiConsumer<DataEntry, Boolean>)DataEntry::setHasMetaData);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getDataEntryId() {
		return _dataEntryId;
	}

	@Override
	public void setDataEntryId(long dataEntryId) {
		_dataEntryId = dataEntryId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@JSON
	@Override
	public long getDataTypeId() {
		return _dataTypeId;
	}

	@Override
	public void setDataTypeId(long dataTypeId) {
		_columnBitmask |= DATATYPEID_COLUMN_BITMASK;

		if (!_setOriginalDataTypeId) {
			_setOriginalDataTypeId = true;

			_originalDataTypeId = _dataTypeId;
		}

		_dataTypeId = dataTypeId;
	}

	public long getOriginalDataTypeId() {
		return _originalDataTypeId;
	}

	@JSON
	@Override
	public long getDataPackId() {
		return _dataPackId;
	}

	@Override
	public void setDataPackId(long dataPackId) {
		_columnBitmask |= DATAPACKID_COLUMN_BITMASK;

		if (!_setOriginalDataPackId) {
			_setOriginalDataPackId = true;

			_originalDataPackId = _dataPackId;
		}

		_dataPackId = dataPackId;
	}

	public long getOriginalDataPackId() {
		return _originalDataPackId;
	}

	@JSON
	@Override
	public long getDataSectionId() {
		return _dataSectionId;
	}

	@Override
	public void setDataSectionId(long dataSectionId) {
		_columnBitmask |= DATASECTIONID_COLUMN_BITMASK;

		if (!_setOriginalDataSectionId) {
			_setOriginalDataSectionId = true;

			_originalDataSectionId = _dataSectionId;
		}

		_dataSectionId = dataSectionId;
	}

	public long getOriginalDataSectionId() {
		return _originalDataSectionId;
	}

	@JSON
	@Override
	public long getDataSetId() {
		return _dataSetId;
	}

	@Override
	public void setDataSetId(long dataSetId) {
		_columnBitmask |= DATASETID_COLUMN_BITMASK;

		if (!_setOriginalDataSetId) {
			_setOriginalDataSetId = true;

			_originalDataSetId = _dataSetId;
		}

		_dataSetId = dataSetId;
	}

	public long getOriginalDataSetId() {
		return _originalDataSetId;
	}

	@JSON
	@Override
	public long getDataCollectionId() {
		return _dataCollectionId;
	}

	@Override
	public void setDataCollectionId(long dataCollectionId) {
		_columnBitmask |= DATACOLLECTIONID_COLUMN_BITMASK;

		if (!_setOriginalDataCollectionId) {
			_setOriginalDataCollectionId = true;

			_originalDataCollectionId = _dataCollectionId;
		}

		_dataCollectionId = dataCollectionId;
	}

	public long getOriginalDataCollectionId() {
		return _originalDataCollectionId;
	}

	@JSON
	@Override
	public String getAccessURL() {
		if (_accessURL == null) {
			return "";
		}
		else {
			return _accessURL;
		}
	}

	@Override
	public void setAccessURL(String accessURL) {
		_accessURL = accessURL;
	}

	@JSON
	@Override
	public String getSequenceId() {
		if (_sequenceId == null) {
			return "";
		}
		else {
			return _sequenceId;
		}
	}

	@Override
	public void setSequenceId(String sequenceId) {
		_sequenceId = sequenceId;
	}

	@JSON
	@Override
	public String getAccessType() {
		if (_accessType == null) {
			return "";
		}
		else {
			return _accessType;
		}
	}

	@Override
	public void setAccessType(String accessType) {
		_accessType = accessType;
	}

	@JSON
	@Override
	public long getCopiedFrom() {
		return _copiedFrom;
	}

	@Override
	public void setCopiedFrom(long copiedFrom) {
		_columnBitmask |= COPIEDFROM_COLUMN_BITMASK;

		if (!_setOriginalCopiedFrom) {
			_setOriginalCopiedFrom = true;

			_originalCopiedFrom = _copiedFrom;
		}

		_copiedFrom = copiedFrom;
	}

	public long getOriginalCopiedFrom() {
		return _originalCopiedFrom;
	}

	@JSON
	@Override
	public boolean getHasMetaData() {
		return _hasMetaData;
	}

	@JSON
	@Override
	public boolean isHasMetaData() {
		return _hasMetaData;
	}

	@Override
	public void setHasMetaData(boolean hasMetaData) {
		_hasMetaData = hasMetaData;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(DataEntry.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), DataEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DataEntry toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DataEntry>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DataEntryImpl dataEntryImpl = new DataEntryImpl();

		dataEntryImpl.setUuid(getUuid());
		dataEntryImpl.setDataEntryId(getDataEntryId());
		dataEntryImpl.setCompanyId(getCompanyId());
		dataEntryImpl.setGroupId(getGroupId());
		dataEntryImpl.setUserId(getUserId());
		dataEntryImpl.setUserName(getUserName());
		dataEntryImpl.setCreateDate(getCreateDate());
		dataEntryImpl.setModifiedDate(getModifiedDate());
		dataEntryImpl.setStatus(getStatus());
		dataEntryImpl.setStatusByUserId(getStatusByUserId());
		dataEntryImpl.setStatusByUserName(getStatusByUserName());
		dataEntryImpl.setStatusDate(getStatusDate());
		dataEntryImpl.setDataTypeId(getDataTypeId());
		dataEntryImpl.setDataPackId(getDataPackId());
		dataEntryImpl.setDataSectionId(getDataSectionId());
		dataEntryImpl.setDataSetId(getDataSetId());
		dataEntryImpl.setDataCollectionId(getDataCollectionId());
		dataEntryImpl.setAccessURL(getAccessURL());
		dataEntryImpl.setSequenceId(getSequenceId());
		dataEntryImpl.setAccessType(getAccessType());
		dataEntryImpl.setCopiedFrom(getCopiedFrom());
		dataEntryImpl.setHasMetaData(isHasMetaData());

		dataEntryImpl.resetOriginalValues();

		return dataEntryImpl;
	}

	@Override
	public int compareTo(DataEntry dataEntry) {
		long primaryKey = dataEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DataEntry)) {
			return false;
		}

		DataEntry dataEntry = (DataEntry)obj;

		long primaryKey = dataEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		DataEntryModelImpl dataEntryModelImpl = this;

		dataEntryModelImpl._originalUuid = dataEntryModelImpl._uuid;

		dataEntryModelImpl._originalCompanyId = dataEntryModelImpl._companyId;

		dataEntryModelImpl._setOriginalCompanyId = false;

		dataEntryModelImpl._originalGroupId = dataEntryModelImpl._groupId;

		dataEntryModelImpl._setOriginalGroupId = false;

		dataEntryModelImpl._originalUserId = dataEntryModelImpl._userId;

		dataEntryModelImpl._setOriginalUserId = false;

		dataEntryModelImpl._setModifiedDate = false;

		dataEntryModelImpl._originalStatus = dataEntryModelImpl._status;

		dataEntryModelImpl._setOriginalStatus = false;

		dataEntryModelImpl._originalDataTypeId = dataEntryModelImpl._dataTypeId;

		dataEntryModelImpl._setOriginalDataTypeId = false;

		dataEntryModelImpl._originalDataPackId = dataEntryModelImpl._dataPackId;

		dataEntryModelImpl._setOriginalDataPackId = false;

		dataEntryModelImpl._originalDataSectionId =
			dataEntryModelImpl._dataSectionId;

		dataEntryModelImpl._setOriginalDataSectionId = false;

		dataEntryModelImpl._originalDataSetId = dataEntryModelImpl._dataSetId;

		dataEntryModelImpl._setOriginalDataSetId = false;

		dataEntryModelImpl._originalDataCollectionId =
			dataEntryModelImpl._dataCollectionId;

		dataEntryModelImpl._setOriginalDataCollectionId = false;

		dataEntryModelImpl._originalCopiedFrom = dataEntryModelImpl._copiedFrom;

		dataEntryModelImpl._setOriginalCopiedFrom = false;

		dataEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DataEntry> toCacheModel() {
		DataEntryCacheModel dataEntryCacheModel = new DataEntryCacheModel();

		dataEntryCacheModel.uuid = getUuid();

		String uuid = dataEntryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			dataEntryCacheModel.uuid = null;
		}

		dataEntryCacheModel.dataEntryId = getDataEntryId();

		dataEntryCacheModel.companyId = getCompanyId();

		dataEntryCacheModel.groupId = getGroupId();

		dataEntryCacheModel.userId = getUserId();

		dataEntryCacheModel.userName = getUserName();

		String userName = dataEntryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			dataEntryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			dataEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			dataEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dataEntryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dataEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		dataEntryCacheModel.status = getStatus();

		dataEntryCacheModel.statusByUserId = getStatusByUserId();

		dataEntryCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = dataEntryCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			dataEntryCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			dataEntryCacheModel.statusDate = statusDate.getTime();
		}
		else {
			dataEntryCacheModel.statusDate = Long.MIN_VALUE;
		}

		dataEntryCacheModel.dataTypeId = getDataTypeId();

		dataEntryCacheModel.dataPackId = getDataPackId();

		dataEntryCacheModel.dataSectionId = getDataSectionId();

		dataEntryCacheModel.dataSetId = getDataSetId();

		dataEntryCacheModel.dataCollectionId = getDataCollectionId();

		dataEntryCacheModel.accessURL = getAccessURL();

		String accessURL = dataEntryCacheModel.accessURL;

		if ((accessURL != null) && (accessURL.length() == 0)) {
			dataEntryCacheModel.accessURL = null;
		}

		dataEntryCacheModel.sequenceId = getSequenceId();

		String sequenceId = dataEntryCacheModel.sequenceId;

		if ((sequenceId != null) && (sequenceId.length() == 0)) {
			dataEntryCacheModel.sequenceId = null;
		}

		dataEntryCacheModel.accessType = getAccessType();

		String accessType = dataEntryCacheModel.accessType;

		if ((accessType != null) && (accessType.length() == 0)) {
			dataEntryCacheModel.accessType = null;
		}

		dataEntryCacheModel.copiedFrom = getCopiedFrom();

		dataEntryCacheModel.hasMetaData = isHasMetaData();

		return dataEntryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DataEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DataEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DataEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((DataEntry)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<DataEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<DataEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DataEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((DataEntry)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DataEntry>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _dataEntryId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private long _dataTypeId;
	private long _originalDataTypeId;
	private boolean _setOriginalDataTypeId;
	private long _dataPackId;
	private long _originalDataPackId;
	private boolean _setOriginalDataPackId;
	private long _dataSectionId;
	private long _originalDataSectionId;
	private boolean _setOriginalDataSectionId;
	private long _dataSetId;
	private long _originalDataSetId;
	private boolean _setOriginalDataSetId;
	private long _dataCollectionId;
	private long _originalDataCollectionId;
	private boolean _setOriginalDataCollectionId;
	private String _accessURL;
	private String _sequenceId;
	private String _accessType;
	private long _copiedFrom;
	private long _originalCopiedFrom;
	private boolean _setOriginalCopiedFrom;
	private boolean _hasMetaData;
	private long _columnBitmask;
	private DataEntry _escapedModel;

}