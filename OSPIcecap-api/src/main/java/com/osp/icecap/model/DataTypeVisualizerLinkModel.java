/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.osp.icecap.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.model.BaseModel;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model interface for the DataTypeVisualizerLink service. Represents a row in the &quot;ICECAP_DataTypeVisualizerLink&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>com.osp.icecap.model.impl.DataTypeVisualizerLinkModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>com.osp.icecap.model.impl.DataTypeVisualizerLinkImpl</code>.
 * </p>
 *
 * @author Jerry H. Seo
 * @see DataTypeVisualizerLink
 * @generated
 */
@ProviderType
public interface DataTypeVisualizerLinkModel
	extends BaseModel<DataTypeVisualizerLink> {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a data type visualizer link model instance should use the {@link DataTypeVisualizerLink} interface instead.
	 */

	/**
	 * Returns the primary key of this data type visualizer link.
	 *
	 * @return the primary key of this data type visualizer link
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this data type visualizer link.
	 *
	 * @param primaryKey the primary key of this data type visualizer link
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the data type visualizer link ID of this data type visualizer link.
	 *
	 * @return the data type visualizer link ID of this data type visualizer link
	 */
	public long getDataTypeVisualizerLinkId();

	/**
	 * Sets the data type visualizer link ID of this data type visualizer link.
	 *
	 * @param dataTypeVisualizerLinkId the data type visualizer link ID of this data type visualizer link
	 */
	public void setDataTypeVisualizerLinkId(long dataTypeVisualizerLinkId);

	/**
	 * Returns the data type ID of this data type visualizer link.
	 *
	 * @return the data type ID of this data type visualizer link
	 */
	public long getDataTypeId();

	/**
	 * Sets the data type ID of this data type visualizer link.
	 *
	 * @param dataTypeId the data type ID of this data type visualizer link
	 */
	public void setDataTypeId(long dataTypeId);

	/**
	 * Returns the visualizer name of this data type visualizer link.
	 *
	 * @return the visualizer name of this data type visualizer link
	 */
	@AutoEscape
	public String getVisualizerName();

	/**
	 * Sets the visualizer name of this data type visualizer link.
	 *
	 * @param visualizerName the visualizer name of this data type visualizer link
	 */
	public void setVisualizerName(String visualizerName);

	/**
	 * Returns the visualizer version of this data type visualizer link.
	 *
	 * @return the visualizer version of this data type visualizer link
	 */
	@AutoEscape
	public String getVisualizerVersion();

	/**
	 * Sets the visualizer version of this data type visualizer link.
	 *
	 * @param visualizerVersion the visualizer version of this data type visualizer link
	 */
	public void setVisualizerVersion(String visualizerVersion);

	/**
	 * Returns the default visualizer of this data type visualizer link.
	 *
	 * @return the default visualizer of this data type visualizer link
	 */
	public boolean getDefaultVisualizer();

	/**
	 * Returns <code>true</code> if this data type visualizer link is default visualizer.
	 *
	 * @return <code>true</code> if this data type visualizer link is default visualizer; <code>false</code> otherwise
	 */
	public boolean isDefaultVisualizer();

	/**
	 * Sets whether this data type visualizer link is default visualizer.
	 *
	 * @param defaultVisualizer the default visualizer of this data type visualizer link
	 */
	public void setDefaultVisualizer(boolean defaultVisualizer);

	/**
	 * Returns the editable of this data type visualizer link.
	 *
	 * @return the editable of this data type visualizer link
	 */
	public boolean getEditable();

	/**
	 * Returns <code>true</code> if this data type visualizer link is editable.
	 *
	 * @return <code>true</code> if this data type visualizer link is editable; <code>false</code> otherwise
	 */
	public boolean isEditable();

	/**
	 * Sets whether this data type visualizer link is editable.
	 *
	 * @param editable the editable of this data type visualizer link
	 */
	public void setEditable(boolean editable);

}